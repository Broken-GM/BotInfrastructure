name: deploy-dev
on:
  push:
    branches:
      - development

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Installing Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::${{ secrets.DEV_ACCOUNT_ID }}:role/Bot-Actions
          role-session-name: brokengmdevbot
          aws-region: us-west-2
      - name: Deploy to VPC CloudFormation
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          name: BotVpc
          template: template.yml
          no-fail-on-empty-changeset: 1
          disable-rollback: 1
          parameter-overrides: "VpcCidrBlock=10.0.0.0/21,PublicSubnetCidrBlock=10.0.0.0/22,PrivateSubnetCidrBlock=10.0.4.0/22,SshIpCidr=${{ secrets.SSHCIDR }}"
      - name: Get Private Ip Cidr
        id: get-cidr
        run: >-
          echo "PrivateIpCidr=$(aws cloudformation --region us-west-2 describe-stacks --stack-name BotVpc --query "Stacks[0].Outputs[0].OutputValue")" >> $GITHUB_OUTPUT
      - name: Get Subnet ID
        id: get-subnet
        run: >-
          echo "SubnetId=$(aws cloudformation --region us-west-2 describe-stacks --stack-name BotVpc --query "Stacks[0].Outputs[3].OutputValue")" >> $GITHUB_OUTPUT
      - name: Get Vpc ID
        id: get-vpc
        run: >-
          echo "VpcId=$(aws cloudformation --region us-west-2 describe-stacks --stack-name BotVpc --query "Stacks[0].Outputs[1].OutputValue")" >> $GITHUB_OUTPUT
      - name: Deploy to Cluster 1 CloudFormation
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          name: BotCluster1
          template: cluster.yml
          no-fail-on-empty-changeset: 1
          disable-rollback: 1
          parameter-overrides: "PrivateSubnet=${{ steps.get-subnet.outputs.SubnetId }},SshIpCidr=${{ steps.get-cidr.outputs.PrivateIpCidr }},VpcId=${{ steps.get-vpc.outputs.VpcId }},KeyPair=Cluster1,DiscordToken=${{ secrets.DISCORDTOKEN }},DiscordClientId=${{ secrets.DISCORDCLIENTID }}"
      - name: Get Cluster ID
        id: get-cluster-1
        run: >-
          echo "Id=$(aws cloudformation --region us-west-2 describe-stacks --stack-name BotCluster1 --query "Stacks[0].Outputs[0].OutputValue")" >> $GITHUB_OUTPUT
      - name: SSM Run Command
        id: ssm-run-command
        run: >-
          aws ssm send-command --document-name "AWS-RunShellScript" --parameters 'commands=["../../../../home/ubuntu/Bot/deploy-development.sh"]' --targets "Key=instanceids,Values=${{ steps.get-cluster-1.outputs.Id }}"